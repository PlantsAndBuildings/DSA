name: CI

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-18.04
    
    name: Build

    steps:
    - name: Checkout Source
      uses: actions/checkout@v2

    - name: Install Boost
      # Use the boost-1.72.0-linux-16.04-gcc-x64.tar.gz for Ubuntu 16.04
      run: |
        $url = "https://github.com/actions/boost-versions/releases/download/1.72.0-20200608.4/boost-1.72.0-linux-18.04-gcc-x64.tar.gz"
        (New-Object System.Net.WebClient).DownloadFile($url, "/tmp/boost.tar.gz")
        mkdir "/tmp/boost"
        tar -xzf "/tmp/boost.tar.gz" -C "/tmp/boost"
        Push-Location -Path "/tmp/boost"
        Invoke-Expression "bash ./setup.sh"

    - name: Set BOOST_ROOT
      # run: echo "::set-env name=BOOST_ROOT::$BOOST_ROOT_1_72_0"
      run: echo "{BOOST_ROOT}={/opt/hostedtoolcache/boost/1.72.0/x64} >> $GITHUB_ENV"

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build -DBoost_INCLUDE_DIR=$BOOST_ROOT/include

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
      
    - name: Create Build TAR
      shell: bash
      working-directory: ${{runner.workspace}}
      run: tar -cvf build.tar ${{runner.workspace}}/build

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-tarball
        path: ${{runner.workspace}}/build.tar

  run_tests:
    runs-on: ubuntu-18.04
    
    name: Run Tests

    # Only run tests if the build completed successfully and uploaded the artifacts
    needs: build

    steps:
    - name: Checkout Source
      uses: actions/checkout@v2

    - name: Download Build Artifact
      uses: actions/download-artifact@v2
      with:
        name: build-tarball
        path: ${{runner.workspace}}

    - name: Checking Contents of Workspace
      shell: bash
      working-directory: ${{runner.workspace}}
      run: ls -ltra
        
    - name: Extract Tarball
      shell: bash
      working-directory: ${{runner.workspace}}
      run: tar -xvf build.tar ${{runner.workspace}}/build

    - name: Install Boost
      # Use the boost-1.72.0-linux-16.04-gcc-x64.tar.gz for Ubuntu 16.04
      run: |
        $url = "https://github.com/actions/boost-versions/releases/download/1.72.0-20200608.4/boost-1.72.0-linux-18.04-gcc-x64.tar.gz"
        (New-Object System.Net.WebClient).DownloadFile($url, "/tmp/boost.tar.gz")
        mkdir "/tmp/boost"
        tar -xzf "/tmp/boost.tar.gz" -C "/tmp/boost"
        Push-Location -Path "/tmp/boost"
        Invoke-Expression "bash ./setup.sh"
  
    - name: Set BOOST_ROOT
      shell: bash
      working-directory: ${{runner.workspace}}
      # run: echo "::set-env name=BOOST_ROOT::$BOOST_ROOT_1_72_0"
      run: echo "{BOOST_ROOT}={/opt/hostedtoolcache/boost/1.72.0/x64} >> $GITHUB_ENV"

    - name: Set LD_LIBRARY_PATH
      shell: bash
      working-directory: ${{runner.workspace}}
      # run: echo "::set-env name=LD_LIBRARY_PATH::$BOOST_ROOT/lib"
      run: echo "::{LD_LIBRARY_PATH}={$BOOST_ROOT/lib} >> $GITHUB_ENV"

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE --verbose
